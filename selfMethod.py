import os
import time


def selfMethod(args,worker):
    #If the tx is Register Asset
    if args[0]=='GE':
        f=open('./resource/worker'+str(worker+1)+'/GE/proof.json','w')
        f.write(args[2])
        f.close()
        try:
            p=os
            result=p.popen('export PATH=$PATH:/home/ycl/.zokrates/bin\ncd ./resource/worker'+str(worker+1)+'/GE/\nzokrates verify\n').readlines()[1][:-1]
        except:
            result='False'
    #If the rx is aus
    else:
        f = open('./resource/worker' + str(worker + 1) + '/SA/proof.json', 'w')
        f.write(args[2])
        f.close()
        p = os
        try:
            result = p.popen('export PATH=$PATH:/home/ycl/.zokrates/bin\ncd ./resource/worker' + str(
                worker + 1) + '/SA/\nzokrates verify\n').readlines()[1][:-2]
        except:
            result = 'False'



    if result=='PASSED':
        #返回上块的内容（本次上快内容由请求提供，也可以由自定义函数产生）
        return args[1]
    return False

# a=time.time()
# for i in range(1000):
#     selfMethod(['GE', 'db282902b8caf1b9fe5f7050a11cb2cb1f99266b6f58dd9f40159d468cfa5e36', '{\n  "scheme": "g16",\n  "curve": "bn128",\n  "proof": {\n    "a": [\n      "0x235a43ffee1791cfa9efb22d8847b310fb6230a1d81f4ab73ec97082db78506a",\n      "0x146e30b1bf2e8373f64f242db5d9babc337862adc75f23e7deb9fbf76d155dc8"\n    ],\n    "b": [\n      [\n        "0x289c01ad61059915e5e0a6f271acb53dd7249088ab52af41b384e48ace7b13d2",\n        "0x1e28a74d08f52cfa373ae2054717f25c171706069b8f0bbbe292146fa43ab70c"\n      ],\n      [\n        "0x0f640af84796c429834b2c9aaa911430e20807fba399ce750d2b90ffaedd7947",\n        "0x1721281d540aa0812ce7b9bebc2d99fab957ee992b765722b1df331d9d9c6225"\n      ]\n    ],\n    "c": [\n      "0x00f40b9123be0c2c5dc121b70a830877ad0d819547c6d72928ea6db264adad68",\n      "0x228c1aa5f07e91fc127ec2ba2a34ef413d64b714cbaa01ddfb223dc90be357cf"\n    ]\n  },\n  "inputs": [\n    "0x00000000000000000000000000000000000000000000000000000000750d6be1",\n    "0x00000000000000000000000000000000000000000000000000000000762162e2",\n    "0x000000000000000000000000000000000000000000000000000000005587f018",\n    "0x00000000000000000000000000000000000000000000000000000000b0df298b",\n    "0x000000000000000000000000000000000000000000000000000000003f8342f3",\n    "0x0000000000000000000000000000000000000000000000000000000056586d83",\n    "0x00000000000000000000000000000000000000000000000000000000c7134db1",\n    "0x000000000000000000000000000000000000000000000000000000004adf810c",\n    "0x00000000000000000000000000000000000000000000000000000000db282902",\n    "0x00000000000000000000000000000000000000000000000000000000b8caf1b9",\n    "0x00000000000000000000000000000000000000000000000000000000fe5f7050",\n    "0x00000000000000000000000000000000000000000000000000000000a11cb2cb",\n    "0x000000000000000000000000000000000000000000000000000000001f99266b",\n    "0x000000000000000000000000000000000000000000000000000000006f58dd9f",\n    "0x0000000000000000000000000000000000000000000000000000000040159d46",\n    "0x000000000000000000000000000000000000000000000000000000008cfa5e36",\n    "0x00000000000000000000000000000000000000000000000000000000f5a5fd42",\n    "0x00000000000000000000000000000000000000000000000000000000d16a2030",\n    "0x000000000000000000000000000000000000000000000000000000002798ef6e",\n    "0x00000000000000000000000000000000000000000000000000000000d309979b",\n    "0x0000000000000000000000000000000000000000000000000000000043003d23",\n    "0x0000000000000000000000000000000000000000000000000000000020d9f0e8",\n    "0x00000000000000000000000000000000000000000000000000000000ea9831a9",\n    "0x000000000000000000000000000000000000000000000000000000002759fb4b",\n    "0x0000000000000000000000000000000000000000000000000000000000000001"\n  ]\n}']
# ,1)
# print(time.time()-a)